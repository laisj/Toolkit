# task type, support train and predict
task = train

# boosting type, support gbdt for now, alias: boosting, boost
boosting_type = gbdt

objective = binary

metric = binary_logloss

# frequence for metric output
metric_freq = 5

# true if need output metric for training data, alias: tranining_metric, train_metric
is_training_metric = true

# number of bins for feature bucket, 255 is a recommend setting, it can save memories, and also has good accuracy. 
# max_bin = 255
max_bin = 255

bin_construct_sample_cnt = 1000000

# training data
# if exsting weight file, should name to "binary.train.weight"
# alias: train_data, train
data = ../../data/train.txt

# validation data, support multi validation data, separated by ','
# if exsting weight file, should name to "binary.test.weight"
# alias: valid, test, test_data, 
valid_data = ../../data/validation.txt

# number of trees(iterations), alias: num_tree, num_iteration, num_iterations, num_round, num_rounds
num_trees = 10000

# shrinkage rate , alias: shrinkage_rate
learning_rate = 0.1

# number of leaves for one tree, alias: num_leaf
num_leaves = 63

# type of tree learner, support following types:
# serial , single machine version
# feature , use feature parallel to train
# data , use data parallel to train
# voting , use voting based parallel to train
# alias: tree
tree_learner = serial

# number of threads for multi-threading. One thread will use one CPU, defalut is setted to #cpu. 
num_threads = 8

max_depth = -1

# minimal number data for one leaf, use this to deal with over-fit
min_data_in_leaf = 1

# minimal sum hessians for one leaf, use this to deal with over-fit
min_sum_hessian_in_leaf = 1e-3

# feature sub-sample, will random select 80% feature to train on each iteration
feature_fraction = 1.0

# Support bagging (data sub-sample), will perform bagging every 5 iterations
bagging_freq = 0

# Bagging farction, will random select 80% data on bagging
# alias: sub_row
bagging_fraction = 1.0

early_stopping_round = 20

lambda_l1 = 0
lambda_l2 = 0

min_gain_to_split = 0

# save memory and faster speed for sparse feature, alias: is_sparse
is_enable_sparse = true

# true if need to save data to binary file and application will auto load data from binary file next time
# alias: is_save_binary, save_binary
is_save_binary_file = false

# output model file
output_model = model.txt

